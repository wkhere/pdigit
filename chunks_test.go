package pdigit

import (
	"strings"
	"testing"
)

func TestWriteChunks(t *testing.T) {
	type s = []int
	var tab = []struct {
		spec       []int
		data, want string
	}{
		{s{}, "", ""},
		{s{}, "12345", "12345"},

		{s{-1}, "", ""},
		{s{-1}, "1", "1"},
		{s{-1}, "1234", "1234"},
		{s{-1}, "12345", "12345"},

		{s{0}, "", ""},
		{s{0}, "1", "1"},
		{s{1}, "", ""},
		{s{1}, "1", "1"},
		{s{0}, "1234", "1234"},
		{s{1}, "1234", "1 2 3 4"},
		{s{2}, "1234", "12 34"},
		{s{3}, "1234", "1 234"},
		{s{4}, "1234", "1234"},
		{s{5}, "1234", "1234"},

		{s{0}, "12345", "12345"},
		{s{1}, "12345", "1 2 3 4 5"},
		{s{2}, "12345", "1 23 45"},
		{s{3}, "12345", "12 345"},
		{s{4}, "12345", "1 2345"},
		{s{5}, "12345", "12345"},
		{s{6}, "12345", "12345"},
		{s{7}, "12345", "12345"},

		{s{2, 4}, "", ""},
		{s{2, 4}, "1             ", "1                "},
		{s{2, 4}, "12            ", "12               "},
		{s{2, 4}, "123           ", "12 3             "},
		{s{2, 4}, "1234          ", "12 34            "},
		{s{2, 4}, "12345         ", "12 345           "},
		{s{2, 4}, "123456        ", "12 3456          "},
		{s{2, 4}, "1234567       ", "12 3456 7        "},
		{s{2, 4}, "1234567890    ", "12 3456 7890     "},
		{s{2, 4}, "12345678901   ", "12 3456 7890 1   "},
		{s{2, 4}, "123456789012  ", "12 3456 7890 12  "},
		{s{2, 4}, "1234567890123 ", "12 3456 7890 123 "},
		{s{2, 4}, "12345678901234", "12 3456 7890 1234"},

		{s{0, 1}, "12345678901234", "12345678901234"},
		{s{2, 0}, "12345678901234", "12 345678901234"},
		{s{-2, 1}, "12345678901234", "12345678901234"},
		{s{2, -1}, "12345678901234", "12 345678901234"},
	}

	for i, tc := range tab {
		p := Processor{GroupSpec: tc.spec, OutSep: SP}
		b := new(strings.Builder)
		p.writeChunks(b, []byte(tc.data))
		have := b.String()
		if have != tc.want {
			t.Errorf("tc[%d] mismatch\nhave %q\nwant %q", i, have, tc.want)
		}
	}
}
