+ output separator for number chunks given by flag
+ accept alpha letters in front of a number (eg. IBAN)
  = for non-alpha chars glued in front of digits there will be simply two
    subsequent non-digit tokens, which is fine

+ treat ansi color chars like whitespaces, pass them further
  note: digits are actually terminated by a single ESC char
+ impl: process line directly to the writer

+ cosmetic: lexer.acceptAny should be actually acceptRun,
  robpike was right
+ actually, lexer should not know about the number of digits
  to split, it can just return digits token;
  splitting can just happen in the processor

- lexer: switch to Ragel, just for fun

+ lexer: even with the current Pike-machine, check that I can switch
  from processing runes to bytes, as all the significant tokens are ascii

+ option for selecting first 2 digits then chunks 4 each (Finnish bank account)
  -> implemented by digit groups

+ reject binary input
- benchmark what is faster: detecting binaries in lexer,
  or leaving simplified lexer and searching for zero byte
  after ReadSlice

+ bug: unbounded bufio.Reader.ReadBytes allocates gigs of mem when processing
  input that never has LF, like /dev/zero
